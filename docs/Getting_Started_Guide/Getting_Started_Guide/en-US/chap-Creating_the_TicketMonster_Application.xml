<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Getting_Started_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Creating_the_TicketMonster_Application">
	<title>Creating the TicketMonster Application</title>
	<section id="Configure_Maven" remap="TID_13798">
		<title>Configure Maven</title>
		<para>
			The Java EE Web Project, on which the TicketMonster application is based, is constructed from a Maven archetype. Maven is distributed with JBoss&nbsp;Developer&nbsp;Studio so it is not necessary to install Maven but, to be able to use the Java EE Web Project wizard with JBoss Enterprise Application Server 6.x, Maven must be correctly configured. The procedure below demonstrates how to configure Maven for use with JBoss Enterprise Application Server 6.x by editing the Maven configuration file from within JBoss&nbsp;Developer&nbsp;Studio.
		</para>
		<procedure>
			<title>Configure Maven</title>
			<step>
				<para>
					Click <guimenu>Window</guimenu>&rarr;<guimenu>Preferences</guimenu>, expand <guilabel>JBoss Tools</guilabel> and select <guilabel>JBoss Maven Integration</guilabel>.
				</para>
				<figure>
					<title>JBoss Maven Integration Pane in the Preferences Window</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3313.png"/>
						</imageobject>
						<textobject>
							<phrase>Click <guimenu>Window</guimenu>&rarr;<guimenu>Preferences</guimenu>, expand <guilabel>JBoss Tools</guilabel> and select <guilabel>JBoss Maven Integration</guilabel>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Click <guibutton>Configure Maven Repositories</guibutton>.
				</para>
			</step>
			<step>
				<para>
					Click <guibutton>Add Repository</guibutton>.
				</para>
			</step>
			<step>
				<para>
					Click <guibutton>Recognize JBoss Maven Enterprise Repositories</guibutton>.
				</para>
			</step>
			<step>
				<para>
					Navigate to <filename>path/to/jboss-eap-6.x.y-maven-repository</filename> and click <guibutton>OK</guibutton>. JBoss Maven Tools recursively scans the path searching for the Maven repository.
				</para>
			</step>
			<step>
				<para>
					Modify the information in the <guilabel>ID</guilabel> and <guilabel>Name</guilabel> fields as desired, ensure the <guilabel>Active by default</guilabel> check box is selected and click <guibutton>OK</guibutton>.
				</para>
				<figure>
					<title>Add Maven Repository Window</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3316.png"/>
						</imageobject>
						<textobject>
							<phrase>Modify the information in the <guilabel>ID</guilabel> and <guilabel>Name</guilabel> fields as desired, ensure the <guilabel>Active by default</guilabel> check box is selected and click <guibutton>OK</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Click <guibutton>Finish</guibutton> and at the prompt asking if you are sure you want to update the Maven configuration file click <guibutton>Yes</guibutton>. If the specified configuration file does not exist, JBoss Maven Tools creates it.
				</para>
				<note>
					<para>
						Maven settings, such as the configuration file, are specified in <guilabel>Preferences</guilabel> under <guilabel>Maven</guilabel>&rarr;<guilabel>User Settings</guilabel>. These settings can be customized.
					</para>
				</note>
			</step>
			<step>
				<para>
					Click <guibutton>Apply</guibutton> and click <guibutton>OK</guibutton> to close the <application>Preferences</application> window.
				</para>
			</step>
		</procedure>
	</section>
	<section id="Set_Up_a_Server_Using_Runtime_Detection" remap="TID_13796">
		<title>Set Up a Server Using Runtime Detection</title>
		<para>
			Servers can be defined from within the <application>Java EE Web Project</application> wizard. But for the purposes of exploring JBoss&nbsp;Developer&nbsp;Studio the procedure below defines the server first using JBoss Server Tools runtime detection.
		</para>
		<procedure>
			<title>Define a Server Using Runtime Detection</title>
			<step>
				<para>
					Click <guimenu>Window</guimenu>&rarr;<guimenu>Preferences</guimenu>, expand <guilabel>JBoss Tools</guilabel> and select <guilabel>JBoss Runtime Detection</guilabel>.
				</para>
				<figure>
					<title>JBoss Runtime Detection Pane</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/4002.png"/>
						</imageobject>
						<textobject>
							<phrase>Click <guimenu>Window</guimenu>&rarr;<guimenu>Preferences</guimenu>, expand <guilabel>JBoss Tools</guilabel> and select <guilabel>JBoss Runtime Detection</guilabel>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Click <guibutton>Add</guibutton>.
				</para>
			</step>
			<step>
				<para>
					Select the directory containing the <guilabel>JBoss Enterprise Application Platform 6.0</guilabel> or <guilabel>JBoss Enterprise Application Platform 6.1</guilabel> installation and click <guibutton>OK</guibutton>. The directory is now scanned for application servers and JBoss Enterprise Application Platform 6.x found.
				</para>
				<figure>
					<title>JBoss Enterprise Application Platform 6.x Found by Runtime Detection</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3336.png"/>
						</imageobject>
						<textobject>
							<phrase>Window showing JBoss Enterprise Application Platform 6.x found by Runtime Detection.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To create a server for JBoss Enterprise Application Platform 6.x, ensure the <guilabel>jboss-eap-6.x</guilabel> check box is selected and click <guibutton>OK</guibutton>.
				</para>
			</step>
			<step>
				<para>
					Click <guibutton>Apply</guibutton> and click <guibutton>OK</guibutton> to close the <guilabel>Preferences</guilabel> window. The server is listed in the <guilabel>Servers</guilabel> view.
				</para>
				<figure>
					<title>JBoss Enterprise Application Platform 6.x Server Listed in Servers View</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3338.png"/>
						</imageobject>
						<textobject>
							<phrase>Servers view lists JBoss Enterprise Application Platform 6.x server.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					The server is initially shown in stopped mode. To start the server, right-click <guilabel>jboss-eap-6.x</guilabel> and click <guimenu>Start</guimenu>. After a short pause, the view switches to the <guilabel>Console</guilabel> view and shows the startup output of the server.
				</para>
			</step>
		</procedure>
	</section>
	<section id="Create_a_Java_EE_Web_Project_Using_JBoss_Central" remap="TID_13786">
		<title>Create a Java EE Web Project Using JBoss Central</title>
		<para>
			The TicketMonster application is based on a Java EE web application. A wizard is provided for creating this type of project in JBoss Central and the procedure below guides you through using the wizard.
		</para>
		<procedure>
			<title>Create a Web Application Using the Java EE Web Project Wizard</title>
			<step>
				<para>
					Click the <guilabel>JBoss Central</guilabel> tab.
				</para>
			</step>
			<step>
				<para>
					In JBoss Central under <guilabel>Start from scratch</guilabel>, click <guilabel>Java EE Web Project</guilabel> to open the <application>Java EE Web Project</application> wizard. If JBoss Central is not visible, click <guimenu>Help</guimenu>&rarr;<guimenu>JBoss Central</guimenu>.
				</para>
				<figure>
					<title>Java EE Web Project in JBoss Central</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3306.png"/>
						</imageobject>
						<textobject>
							<phrase>In JBoss Central under <guilabel>Start from scratch</guilabel>, click <guilabel>Java EE Web Project</guilabel> to open the <application>Java EE Web Project</application> wizard.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					From the <guilabel>Target Runtime</guilabel> list, select <guilabel>jboss-eap-6.x Runtime</guilabel> and click <guibutton>Next</guibutton>.
				</para>
				<figure>
					<title>JBoss Enterprise Application Platform 6.x Selected as Target Runtime in Java EE Web Project Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3311.png"/>
						</imageobject>
						<textobject>
							<phrase>From the <guilabel>Target Runtime</guilabel> list, select <guilabel>jboss-eap-6.x Runtime</guilabel>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					In the <guilabel>Project name</guilabel> field, type <command>ticket-monster</command>.
				</para>
			</step>
			<step>
				<para>
					In the <guilabel>Package</guilabel> field, type <command>org.jboss.jdf.example.ticketmonster</command> and click <guibutton>Finish</guibutton> to create the project.
				</para>
				<figure>
					<title>Completed Project Name and Package Fields in Java EE Web Project Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3310.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Project name</guilabel> field, type <command>ticket-monster</command>. In the <guilabel>Package</guilabel> field, type <command>org.jboss.jdf.example.ticketmonster</command> and click <guibutton>Next</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					During project creation, the wizard imports project dependencies. When the <application>Java EE Web Project</application> wizard displays <guilabel>'Java EE Web Project' Project is now ready</guilabel>, click <guibutton>Finish</guibutton> to close the wizard. A <filename>README.md</filename> file for the project automatically opens for viewing and the project is listed in the <guilabel>Project Explorer</guilabel> view.
				</para>
				<figure>
					<title>'Project is now ready' Message in Java EE Web Project Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3307.png"/>
						</imageobject>
						<textobject>
							<phrase>When the <application>Java EE Web Project</application> wizard displays <guilabel>'Java EE Web Project' Project is now ready</guilabel>, click <guibutton>Finish</guibutton> to close the wizard.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
		</procedure>
	</section>
	<section id="Add_an_Entity_Using_Forge_Tools" remap="TID_13791">
		<title>Add an Entity Using Forge Tools</title>
		<para>
			A new entity class can be added to the TicketMonster project using Forge Tools. In the procedure below an <filename>Event</filename> entity class is created to hold information about the events for which users can buy tickets. This <filename>Event</filename> entity has id, name, description, major and picture fields.
		</para>
		<procedure>
			<title>Add an Entity Using Forge Tools</title>
			<step>
				<para>
					In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/java</guilabel>.
				</para>
			</step>
			<step>
				<para>
					Right-click <guilabel>org.jboss.jdf.example.ticketmonster.model</guilabel> and click <guimenu>Show In</guimenu>&rarr;<guimenu>Forge Console</guimenu>.
				</para>
				<figure>
					<title><guimenu>Show In</guimenu>&rarr;<guimenu>Forge Console</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3297.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/java</guilabel>. Right-click <guilabel>org.jboss.jdf.example.ticketmonster.model</guilabel> and click <guimenu>Show In</guimenu>&rarr;<guimenu>Forge Console</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					When asked <guilabel>Do you want to start the Forge runtime?</guilabel> click <guibutton>Yes</guibutton>. The <guilabel>Forge Console</guilabel> view opens and Forge is started. The first command is automatically entered on the Forge command line and it changes the present working directory to <filename>model</filename>.
				</para>
				<figure>
					<title>Automated Workflow Resulting from <guimenu>Show In</guimenu>&rarr;<guimenu>Forge Console</guimenu></title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3296.png"/>
						</imageobject>
						<textobject>
							<phrase>The first command is automatically entered on the Forge command line and it changes the present working directory to <filename>model</filename>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To create the <filename>Event</filename> entity class, on the Forge command line enter 
					<screen>entity --named Event --package org.jboss.jdf.example.ticketmonster.model</screen> This creates a <filename>Event.java</filename> file that is automatically opened in a Java editor.
				</para>
				<note>
					<para>
						The Forge console has auto-complete features. If you start typing a command, you can press <keycap>Tab</keycap> and Forge attempts to complete the command as far as possible. If there are multiple possible options for completing a command, all the options are output in the Forge console for you to see.
					</para>
				</note>
			</step>
			<step>
				<para>
					To define the primary key attribute of the <filename>Event</filename> entity class, on the Forge command line enter 
					<screen>validation setup
			</screen>
				</para>
			</step>
			<step>
				<para>
					To create the fields for the <filename>Event</filename> entity class, on the Forge command line enter 
					<screen>field string --named name
field string --named description
field boolean --named major
field string --named picture
			</screen>
				</para>
			</step>
			<step>
				<para>
					To set up constraints on the accepted values of the fields of the <filename>Event</filename> entity class, on the Forge command line enter 
					<screen>constraint NotNull --onProperty name
constraint Size --onProperty name --min 5 --max 50 --message "Must be &gt; 5 and &lt; 50"
constraint Size --onProperty description --min 20 --max 1000 --message "Must be &gt; 20 and &lt; 1000"
			</screen>
				</para>
				<figure>
					<title>Complete Forge Output for this TicketMonster Workflow</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3295.png"/>
						</imageobject>
						<textobject>
							<phrase>The Forge Console displays the commands and associated output for this TicketMonster workflow.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
		</procedure>
	</section>
	<section id="Add_an_Entity_Using_Hibernate_Tools" remap="TID_13784">
		<title>Add an Entity Using Hibernate Tools</title>
		<para>
			A new entity class can be added to the TicketMonster project using Hibernate Tools. In the procedure below a <filename>Venue</filename> entity class is created to hold information about the venues where events will be held. This <filename>Venue</filename> entity has id, name, description and capacity fields.
		</para>
		<procedure>
			<title>Add an Entity Using Hibernate Tools</title>
			<step>
				<para>
					In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/java</guilabel>.
				</para>
			</step>
			<step>
				<para>
					Right-click <guilabel>org.jboss.jdf.example.ticketmonster.model</guilabel> and click <guimenu>New</guimenu>&rarr;<guimenu>Class</guimenu>.
				</para>
				<figure>
					<title><guimenu>New</guimenu>&rarr;<guimenu>Class</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3304.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/java</guilabel>. Right-click <guilabel>org.jboss.jdf.example.ticketmonster.model</guilabel> and click <guimenu>New</guimenu>&rarr;<guimenu>Class</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					In the <guilabel>Name</guilabel> field, type <command>Venue</command> and click <guibutton>Finish</guibutton>. This creates a <filename>Venue.java</filename> file that is automatically opened in a Java editor.
				</para>
				<figure>
					<title>Completed Name Field in Java Class Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3300.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Name</guilabel> field, type <command>Venue</command> and click <guibutton>Finish</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Add fields to the entity by adding the following lines in between the braces of the <filename>Venue</filename> class 
					<screen>private Long id;
private String name;
private String description;
private int capacity;
			</screen>
				</para>
			</step>
			<step>
				<para>
					To save the <filename>Venue.java</filename> file, press <keycap>Ctrl+S</keycap>.
				</para>
			</step>
			<step>
				<para>
					To add get and set methods for each field, right-click a new line after <command>private int capacity;</command> and click <guimenu>Source</guimenu>&rarr;<guimenu>Generate Getters and Setters</guimenu>.
				</para>
				<figure>
					<title><guimenu>Source</guimenu>&rarr;<guimenu>Generate Getters and Setters</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3303.png"/>
						</imageobject>
						<textobject>
							<phrase>Right-click a new line after <command>private int capacity;</command> and click <guimenu>Source</guimenu>&rarr;<guimenu>Generate Getters and Setters</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Click <guibutton>Select All</guibutton> and click <guibutton>OK</guibutton>.
				</para>
			</step>
			<step>
				<para>
					Save the <filename>Venue.java</filename> file.
				</para>
			</step>
			<step>
				<para>
					To make the <filename>Venue</filename> class into an entity, right-click anywhere in the <command>Venue</command> class and click <guimenu>Source</guimenu>&rarr;<guimenu>Generate Hibernate/JPA annotations</guimenu>.
				</para>
				<figure>
					<title><guimenu>Source</guimenu>&rarr;<guimenu>Generate Hibernate/JPA annotations</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3299.png"/>
						</imageobject>
						<textobject>
							<phrase>Right-click anywhere in the <command>Venue</command> class and click <guimenu>Source</guimenu>&rarr;<guimenu>Generate Hibernate/JPA annotations</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Ensure <guilabel>org.jboss.jdf.example.ticketmonster.model.Venue</guilabel> is selected and click <guibutton>Next</guibutton>.
				</para>
			</step>
			<step>
				<para>
					Click <guibutton>Finish</guibutton> and save the <filename>Venue.java</filename> file.
				</para>
			</step>
		</procedure>
	</section>
	<section id="Prepare_Event_Records_to_Populate_the_Database" remap="TID_13783">
		<title>Prepare Event Records to Populate the Database</title>
		<para>
			This web project uses H2 for data storage by default. H2 is a Java database integrated with the application servers of JBoss&nbsp;Enterprise&nbsp;Application&nbsp;Platform 6. It is an in-memory database which means that the data does not persist once the application using the database stops running. For this reason, seed data must be stored in a file within the project and added to the database each time the application starts. While it might not seem practical to have to construct the database each time the application starts, this type of data storage is useful during development for testing purposes.
		</para>
		<warning>
			<para>
				The use of H2 for data storage is for testing purposes only and must not be used during production.
			</para>
		</warning>
		<para>
			The procedure below demonstrates preparing two sample Event records for addition to the H2 database once the TicketMonster application starts.
		</para>
		<procedure>
			<title>Prepare Event Records</title>
			<step>
				<para>
					In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/resources</guilabel>.
				</para>
			</step>
			<step>
				<para>
					To open the <filename>import.sql</filename> file for editing, double-click the file name.
				</para>
				<figure>
					<title><filename>import.sql</filename> File Location</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3328.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/resources</guilabel>. Double-click the <filename>import.sql</filename> file to open it in the editor.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					The file already contains one sample Member record. If your screen is small you might not be able to see the whole of the entry. Double-click the <guilabel>import.sql</guilabel> view label to make the editor fill the window.
				</para>
			</step>
			<step>
				<para>
					To create a new Event record, type the following on one line after the existing Member record 
					<screen>insert into Event (id, name, description, major, picture, version) values (1, 'Shane''s Sock Puppets', 'This critically acclaimed masterpiece...', true, 'http://dl.dropbox.com/u/65660684/640px-Carnival_Puppets.jpg', 1);</screen>
				</para>
			</step>
			<step>
				<para>
					To create a second new Event record, type the following on one line after the first new Event record 
					<screen>insert into Event (id, name, description, major, picture, version) values (2, 'Rock concert of the decade', 'Get ready to rock...', true, 'http://dl.dropbox.com/u/65660684/640px-Weir%2C_Bob_(2007)_2.jpg', 1);</screen>
				</para>
				<figure>
					<title>Content of the <filename>import.sql</filename> File for this TicketMonster Workflow</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3327.png"/>
						</imageobject>
						<textobject>
							<phrase>The <filename>import.sql</filename> file contains the two new Event records.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To save the <filename>import.sql</filename> file, press <keycap>Ctrl+S</keycap>.
				</para>
			</step>
			<step>
				<para>
					To make the editor return to its previous size, double-click the <guilabel>import.sql</guilabel> view label.
				</para>
			</step>
		</procedure>
	</section>
	<section id="Deploy_the_Application_using_JBoss_Server_Tools" remap="TID_13795">
		<title>Deploy the Application using JBoss Server Tools</title>
		<para>
			The TicketMonster application can be deployed on the JBoss&nbsp;Enterprise&nbsp;Application&nbsp;Platform 6.x server created earlier in the tutorial. The procedure below guides you through how to do this.
		</para>
		<procedure>
			<title>Deploy the Application Using JBoss Server Tools</title>
			<step>
				<para>
					In the <guilabel>Project Explorer</guilabel> view, right-click the <guilabel>ticket-monster</guilabel> project name and click <guimenu>Run As</guimenu>&rarr;<guimenu>Run on Server</guimenu>.
				</para>
				<figure>
					<title><guimenu>Run As</guimenu>&rarr;<guimenu>Run on Server</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3294.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Project Explorer</guilabel> view, right-click on <guilabel>ticket-monster</guilabel> and click <guimenu>Run As</guimenu>&rarr;<guimenu>Run on Server</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					In the <application>Run On Server</application> wizard, ensure <guilabel>Choose an existing server</guilabel> is selected.
				</para>
			</step>
			<step>
				<para>
					From the <guilabel>Select the server that you want to use</guilabel> table, select <guilabel>jboss-eap-6.x</guilabel> and click <guibutton>Finish</guibutton>. If not already in view, the <guilabel>Console</guilabel> view automatically opens and shows the runtime server output. Also, a <guilabel>Web Browser</guilabel> automatically opens and displays the web page of the running TicketMonster application.
				</para>
				<figure>
					<title>JBoss Enterprise Application Platform 6.x Selected in Run on Server Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3293.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <application>Run On Server</application> wizard, ensure <guilabel>Choose an existing server</guilabel> is selected. In the <guilabel>Select the server that you want to use</guilabel> table, select <guilabel>jboss-eap-6.x</guilabel> and click <guibutton>Finish</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					In the <guilabel>Web Browser</guilabel>, enter sample Member data in the Member Registration fields and click <guibutton>Register</guibutton>. The submitted data is displayed in the <guilabel>Members</guilabel> table, which is visible at the bottom of the web page.
				</para>
				<figure>
					<title>Sample Data in the Member Registration Fields</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3290.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Web Browser</guilabel>, enter sample Member data in the Member Registration pane and click <guibutton>Register</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
		</procedure>
	</section>
	<section id="Access_and_Query_the_Database" remap="TID_13797">
		<title>Access and Query the Database</title>
		<para>
			This web project uses the in-memory database, H2, of the application servers in JBoss&nbsp;Enterprise&nbsp;Application&nbsp;Platform 6. The H2 console web application can be used to access the H2 database but this is not packaged with JBoss&nbsp;Enterprise&nbsp;Application&nbsp;Platform 6. As the procedure below explains, the H2 console web application must be downloaded and deployed on the application server from outside JBoss&nbsp;Developer&nbsp;Studio before the H2 database can be accessed.
		</para>
		<procedure>
			<title>Access and Query the Database</title>
			<step>
				<para>
					Go to <ulink url="http://www.jboss.org/jdf/quickstarts/jboss-as-quickstart/h2-console/"/>.
				</para>
			</step>
			<step>
				<para>
					Click <guibutton>Download</guibutton> and click <guilabel>Source zip</guilabel>.
				</para>
				<figure>
					<title>H2 Download Website</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3289.png"/>
						</imageobject>
						<textobject>
							<phrase>Go to <ulink url="http://www.jboss.org/jdf/quickstarts/jboss-as-quickstart/h2-console/"/>. Click <guibutton>Download</guibutton> and click <guilabel>Source zip</guilabel>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To deploy the H2 console web application, extract the contents of the downloaded file and copy the <filename>h2console.war</filename> file from the <filename>h2-console</filename> directory to the <filename>path/to/jboss-eap-6.x/standalone/deployments</filename> directory. The H2 console web application immediately starts running on the JBoss&nbsp;Enterprise&nbsp;Application&nbsp;Platform 6.x server running the TicketMonster application. This can be confirmed by looking at the server output in the <guilabel>Console</guilabel> view in JBoss&nbsp;Developer&nbsp;Studio.
				</para>
				<figure>
					<title>Console Output showing <filename>h2console.war</filename> Deployed</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3287.png"/>
						</imageobject>
						<textobject>
							<phrase>The deployment of the H2 console web application can be confirmed by looking at the server output in the <guilabel>Console</guilabel> tab in JBoss&nbsp;Developer&nbsp;Studio.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					In the IDE open a new <guilabel>Web Browser</guilabel> by clicking <guimenu>Window</guimenu>&rarr;<guimenu>Show View</guimenu>&rarr;<guimenu>Other</guimenu>, expand <guilabel>General</guilabel> and double-click <guilabel>Internal Web Browser</guilabel>.
				</para>
			</step>
			<step>
				<para>
					In the address bar of the <guilabel>Web Browser</guilabel>, enter <ulink url="http://localhost:8080/h2console"/>.
				</para>
			</step>
			<step>
				<para>
					In the <guilabel>Login</guilabel> area, in the <guilabel>JDBC URL</guilabel> field type <command>jdbc:h2:mem:ticket-monster</command> and in both the <guilabel>User Name</guilabel> and <guilabel>Password</guilabel> fields type <command>sa</command>. These settings are defined in the <filename>ticket-monster-ds.xml</filename> file in the <filename>ticket-monster/src/main/webapp/WEB-INF</filename> directory.
				</para>
				<figure>
					<title>Completed H2 Login Web Page</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3283.png"/>
						</imageobject>
						<textobject>
							<phrase>In the address bar of the <guilabel>Web Browser</guilabel>, enter <ulink url="http://localhost:8080/h2console"/>. In the <guilabel>Login</guilabel> area, type <command>jdbc:h2:mem:ticket-monster</command> in the <guilabel>JDBC URL</guilabel> field and type <command>sa</command> in both the <guilabel>User Name</guilabel> and <guilabel>Password</guilabel> fields.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To connect to the database, click <guibutton>Connect</guibutton>.
				</para>
			</step>
			<step>
				<para>
					The <filename>Event</filename>, <filename>Member</filename> and <filename>Venue</filename> entities created in the TicketMonster project are displayed under <guilabel>jbdc:h2:mem:ticket-monster</guilabel>. Expanding the entities shows the fields associated with each. The records stored in the database are viewed using SQL search statements. For example, to display all the Event records stored in the database, click <guilabel>Event</guilabel>, which creates a SQL search statement based on Event in the <guilabel>SQL statement</guilabel> field, and click <guibutton>Run</guibutton>. The details of the Event sample records you added to <filename>import.sql</filename> earlier in the tutorial are visible in the table below the <guilabel>SQL statement</guilabel> field.
				</para>
				<figure>
					<title>Event Records Stored in the H2 Database</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3285.png"/>
						</imageobject>
						<textobject>
							<phrase>To display all the Event records stored in the database, click <guilabel>Event</guilabel>, which creates a SQL search statement based on Event in the <guilabel>SQL statement</guilabel> field, and click <guibutton>Run</guibutton>. The details of the Event sample records you added to <filename>import.sql</filename> earlier in the tutorial are visible in the table below the <guilabel>SQL statement</guilabel> field.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
		</procedure>
	</section>
	<section id="Add_a_RESTful_Web_Service" remap="TID_13785">
		<title>Add a RESTful Web Service</title>
		<para>
			For the TicketMonster application to be able to access the information stored in the database, web services are needed. The procedure below creates a RESTful web service that returns all the events in the database. It generates a POJO (plain old Java object) and adds JAX-RS annotations to create an endpoint.
		</para>
		<procedure>
			<title>Add a RESTful Web Service</title>
			<step>
				<para>
					In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/java</guilabel>.
				</para>
			</step>
			<step>
				<para>
					Right-click <guilabel>org.jboss.jdf.example.ticketmonster.rest</guilabel> and click <guimenu>New</guimenu>&rarr;<guimenu>Class</guimenu>.
				</para>
				<figure>
					<title><guimenu>New</guimenu>&rarr;<guimenu>Class</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3333.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>Java Resources</guilabel>&rarr;<guilabel>src/main/java</guilabel>. Right-click <guilabel>org.jboss.jdf.example.ticketmonster.rest</guilabel> and click <guimenu>New</guimenu>&rarr;<guimenu>Class</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					In the <guilabel>Name</guilabel> field, type <command>EventService</command> and click <guibutton>Finish</guibutton>. This creates a <filename>EventService.java</filename> file that is automatically opened in a Java editor.
				</para>
				<figure>
					<title>Completed Name Field in Java Class Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3332.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Name</guilabel> field, type <command>EventService</command> and click <guibutton>Finish</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Add the following lines immediately above <command>public class EventService {</command>
					<screen>
@Path("/events")
@RequestScoped			
			</screen> and add the following lines in between the braces of the <guilabel>EventService</guilabel> class 
					<screen>@Inject
private EntityManager em;

@GET
@Produces(MediaType.APPLICATION_JSON)
public List&lt;Event&gt; getAllEvents() {
	final List&lt;Event&gt; results =
		em.createQuery("select e from Event e order by e.name").getResultList();
	return results;
}</screen>
				</para>
			</step>
			<step>
				<para>
					To save the <filename>EventService.java</filename> file, press <keycap>Ctrl+S</keycap>
				</para>
			</step>
			<step>
				<para>
					To resolve the errors relating to missing imports, right-click anywhere in the <filename>EventService</filename> class and click <guimenu>Source</guimenu>&rarr;<guimenu>Organize Imports</guimenu>.
				</para>
				<figure>
					<title><guimenu>Source</guimenu>&rarr;<guimenu>Organize Imports</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3334.png"/>
						</imageobject>
						<textobject>
							<phrase>Right-click anywhere in the <filename>EventService</filename> class and click <guimenu>Source</guimenu>&rarr;<guimenu>Organize Imports</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					For each class name that is not unique, select the class to use as follows and click <guibutton>Next</guibutton>: 
					<itemizedlist>
						<listitem>
							<para>
								For <filename>MediaType</filename> select <guilabel>javax.ws.rs.core.MediaType</guilabel>
							</para>
						</listitem>
						<listitem>
							<para>
								For <filename>Event</filename> select <guilabel>org.jboss.jdf.example.ticketmonster.model.Event</guilabel>
							</para>
						</listitem>
						<listitem>
							<para>
								For <filename>Produces</filename> select <guilabel>javax.ws.rs.Produces</guilabel>
							</para>
						</listitem>
						<listitem>
							<para>
								For <filename>List</filename> select <guilabel>java.util.List</guilabel>
							</para>
						</listitem>
						<listitem>
							<para>
								For <filename>Inject</filename> select <guilabel>java.inject.Inject</guilabel>
							</para>
						</listitem>
						<listitem>
							<para>
								For <filename>RequestScoped</filename> select <guilabel>java.enterprise.context.RequestScoped</guilabel>
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<figure>
					<title>For <filename>MediaType</filename> Class Select <guilabel>javax.ws.rs.core.MediaType</guilabel></title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3330.png"/>
						</imageobject>
						<textobject>
							<phrase>For each class name that is not unique, select the class to use as described here and click <guibutton>Next</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					Once all the classes have been chosen, click <guibutton>Finish</guibutton>. The import statements corresponding to the class names selected in the previous step are added to the <filename>EventService.java</filename> file.
				</para>
			</step>
			<step>
				<para>
					Save the <filename>EventService.java</filename> file.
				</para>
			</step>
			<step>
				<para>
					To update the deployed version of the application, in the <guilabel>Servers</guilabel> view expand <guilabel>jboss-eap-6.x</guilabel>. Right-click <guilabel>ticket-monster</guilabel> and click <guimenu>Full Publish</guimenu>.
				</para>
				<figure>
					<title><guimenu>Full Publish</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3335.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Servers</guilabel> view expand <guilabel>jboss-eap-6.x</guilabel>. Right-click <guilabel>ticket-monster</guilabel> and click <guimenu>Full Publish</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To see the output of the new RESTful endpoint, open a new <guilabel>Web Browser</guilabel> by clicking <guimenu>Window</guimenu>&rarr;<guimenu>Show View</guimenu>&rarr;<guimenu>Other</guimenu>, expand <guilabel>General</guilabel> and double-click <guilabel>Internal Web Browser</guilabel>.
				</para>
			</step>
			<step>
				<para>
					In the address bar of the <guilabel>Web Browser</guilabel>, enter <ulink url="http://localhost:8080/ticket-monster/rest/events"/>. In the opened file browser window, select a directory and enter a file name in which to save the JSON output. The file can be viewed with a text editor and it contains details of the two event records created earlier in the tutorial.
				</para>
			</step>
		</procedure>
	</section>
	<section id="Add_a_User_Interface_Optimized_for_Mobile_Devices" remap="TID_13794">
		<title>Add a User Interface Optimized for Mobile Devices</title>
		<para>
			The TicketMonster user interface displays on desktop and mobile clients but it is not optimized for the latter. The procedure below uses the jQuery Mobile API to create a mobile optimized user interface. The mobile user interface created varies from the existing user interface by displaying the names of the events returned by the previously created web service rather than the Member Registration web page.
		</para>
		<procedure>
			<title>Add a User Interface Optimized for Mobile Devices</title>
			<step>
				<para>
					In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>src</guilabel>&rarr;<guilabel>main</guilabel>.
				</para>
			</step>
			<step>
				<para>
					Right-click <guilabel>webapp</guilabel> and click <guimenu>New</guimenu>&rarr;<guimenu>HTML file</guimenu>.
				</para>
				<figure>
					<title><guimenu>New</guimenu>&rarr;<guimenu>HTML file</guimenu> Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3324.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Project Explorer</guilabel> view, expand <guilabel>ticket-monster</guilabel>&rarr;<guilabel>src</guilabel>&rarr;<guilabel>main</guilabel>. Right-click <guilabel>webapp</guilabel> and click <guimenu>New</guimenu>&rarr;<guimenu>HTML file</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					In the <guilabel>Enter or select the parent folder</guilabel> field, type <filename>ticket-monster/src/main/webapp</filename>.
				</para>
			</step>
			<step>
				<para>
					In the <guilabel>File name</guilabel> field, type <filename>mobile.html</filename> and click <guibutton>Next</guibutton>.
				</para>
				<figure>
					<title>Completed File Name Field in New HTML File Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3323.png"/>
						</imageobject>
						<textobject>
							<phrase>In the <guilabel>Enter or select the parent folder</guilabel> field, type <filename>ticket-monster/src/main/webapp</filename>. In the <guilabel>File name</guilabel> field, type <filename>mobile.html</filename> and click <guibutton>Next</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					From the <guilabel>Templates</guilabel> list, select <guilabel>HTML5 jQuery Mobile Page</guilabel> and click <guibutton>Finish</guibutton>. This creates a <filename>mobile.html</filename> file that is automatically opened in the <guilabel>Visual/Source</guilabel> tab of the Visual Page Editor.
				</para>
				<figure>
					<title>Selected <guilabel>HTML5 jQuery Mobile Page</guilabel> Template in New HTML File Wizard</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3326.png"/>
						</imageobject>
						<textobject>
							<phrase>From the <guilabel>Templates</guilabel> list, select <guilabel>HTML5 jQuery Mobile Page</guilabel> and click <guibutton>Finish</guibutton>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To list the events returned by the web service in the mobile user interface, add the following lines immediately after the <command>alert("Ready To Go");</command> line 
					<screen>$.getJSON("rest/events", function(events) {
	// console.log("returned are " + events);
	var listOfEvents = $("#listOfItems");
	listOfEvents.empty();
	$.each(events, function(index, event) {
		// console.log(event.name);
		listOfEvents.append("&lt;li&gt;&lt;a href='#'&gt;" + event.name + "&lt;/a&gt;");
    });
    listOfEvents.listview("refresh");
});
    </screen>
				</para>
				<figure>
					<title>Completed <filename>mobile.html</filename> File</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3318.png"/>
						</imageobject>
						<textobject>
							<phrase>To list the events returned by the web service in the mobile user interface, add the lines given immediately after the <command>alert("Ready To Go");</command> line</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To save the <filename>mobile.html</filename> file, press <keycap>Ctrl+S</keycap>.
				</para>
			</step>
			<step>
				<para>
					To view the mobile interface, open an external web browser and in the address bar enter <ulink url="http://localhost:8080/ticket-monster/mobile.html"/>. At the <guilabel>Ready To Go</guilabel> prompt, click <guibutton>OK</guibutton>. The names of the events in the database are displayed. 
					<note>
						<para>
							HTML pages are deployed immediately so there is no need to do a full publish of the TicketMonster application to see changes.
						</para>
					</note>
				</para>
				<figure>
					<title>Events Displayed via Mobile Interface in External Web Browser</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3325.png"/>
						</imageobject>
						<textobject>
							<phrase>To view the mobile interface, open a <guilabel>Web Browser</guilabel> tab and in the address bar enter <ulink url="http://localhost:8080/ticket-monster/mobile.html"/>. At the <guilabel>Ready To Go</guilabel> prompt, click <guibutton>OK</guibutton>. The names of the events in the database are displayed.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
		</procedure>
	</section>
	<section id="Test_the_Mobile_User_Interface_Using_BrowserSim" remap="TID_13790">
		<title>Test the Mobile User Interface Using BrowserSim</title>
		<para>
			Mobile user interfaces are best tested on mobile devices and JBoss&nbsp;Developer&nbsp;Studio provides BrowserSim for this purpose. The procedure below guides you through viewing the TicketMonster application on simulated mobile devices using BrowserSim.
		</para>
		<procedure>
			<title>Test the Mobile User Interface Using BrowserSim</title>
			<step>
				<para>
					To view the mobile user interface with BrowserSim, on the toolbar click the <guibutton>BrowserSim</guibutton> icon 
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/3339.png"/>
						</imageobject>
					</inlinemediaobject>. A simulated device is displayed.
				</para>
			</step>
			<step>
				<para>
					At the <guilabel>Ready To Go</guilabel> prompt, click <guibutton>Close</guibutton>. The names of the events in the database are displayed.
				</para>
				<note>
					<para>
						If the names of the events in the database are not displayed, check the address bar of the simulated device. The address bar must state <ulink url="http://localhost:8080/ticket-monster/mobile.html"/>.
					</para>
				</note>
			</step>
			<step>
				<para>
					To rotate the mobile device, click in any corner of the simulated device.
				</para>
			</step>
			<step>
				<para>
					To change the type of simulated device displayed, right-click anywhere on the simulated device, click <guimenu>Skin</guimenu> and select from the different skins listed.
				</para>
				<figure>
					<title>Skin Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3322.png"/>
						</imageobject>
						<textobject>
							<phrase>To change the type of simulated device displayed, right-click anywhere on the simulated device, click <guimenu>Skin</guimenu> and select from the different skins listed.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
			<step>
				<para>
					To close BrowserSim, right-click anywhere on the simulated device and click <guimenu>Close</guimenu>.
				</para>
				<figure>
					<title>Close Menu Option</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/3320.png"/>
						</imageobject>
						<textobject>
							<phrase>To close BrowserSim, right-click anywhere on the simulated device and click <guimenu>Close</guimenu>.</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</step>
		</procedure>
	</section>
</chapter>